 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/frontend/src/components/chat/ChatbotPanel.jsx b/frontend/src/components/chat/ChatbotPanel.jsx
index 3b9388cfbaee56f486437097b28eb043eba76da8..cac8d67b67f665496078b42ebb0ae86370695140 100644
--- a/frontend/src/components/chat/ChatbotPanel.jsx
+++ b/frontend/src/components/chat/ChatbotPanel.jsx
@@ -1,84 +1,150 @@
 import React, { useState, useEffect } from 'react';
 
 const ChatbotPanel = () => {
   const [messages, setMessages] = useState([]);
   const [input, setInput] = useState('');
   const [userId, setUserId] = useState('');
+  const [conversations, setConversations] = useState([]);
+  const [conversationId, setConversationId] = useState(null);
 
   // Generate or retrieve user ID on component mount
   useEffect(() => {
     let storedUserId = localStorage.getItem('chess-coach-user-id');
     
     if (!storedUserId) {
       // Generate a unique user ID
       storedUserId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
       localStorage.setItem('chess-coach-user-id', storedUserId);
     }
     
     setUserId(storedUserId);
   }, []);
 
+  useEffect(() => {
+    if (userId) {
+      fetchConversations();
+    }
+  }, [userId]);
+
+  const fetchConversations = async () => {
+    try {
+      const res = await fetch(`/api/chat/conversations?userId=${userId}`);
+      const data = await res.json();
+      setConversations(data);
+    } catch (err) {
+      console.error('Failed to load conversations:', err);
+    }
+  };
+
+  const loadConversation = async (id) => {
+    try {
+      const res = await fetch(`/api/chat/conversations/${id}?userId=${userId}`);
+      const data = await res.json();
+      setConversationId(id);
+      if (data.messages) {
+        setMessages(
+          data.messages.map((m) => ({
+            from: m.role === 'user' ? 'user' : 'bot',
+            text: m.content
+          }))
+        );
+      }
+    } catch (err) {
+      console.error('Failed to load conversation:', err);
+    }
+  };
+
   const sendMessage = async () => {
     if (!input.trim() || !userId) return;
     const userText = input;
-    setMessages(prev => [...prev, { from: 'user', text: userText }]);
+    setMessages((prev) => [...prev, { from: 'user', text: userText }]);
     setInput('');
 
     try {
-      const res = await fetch('/py-api/chat/message', {
+      const res = await fetch('/api/chat/message', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
-        body: JSON.stringify({ 
+        body: JSON.stringify({
           message: userText,
-          userId: userId
+          userId: userId,
+          conversationId: conversationId
         })
       });
       const data = await res.json();
+      if (data.conversationId && !conversationId) {
+        setConversationId(data.conversationId);
+        fetchConversations();
+      }
       if (data.response) {
-        setMessages(prev => [...prev, { from: 'bot', text: data.response }]);
+        setMessages((prev) => [...prev, { from: 'bot', text: data.response }]);
       } else {
-        setMessages(prev => [...prev, { from: 'bot', text: 'No response received from AI' }]);
+        setMessages((prev) => [
+          ...prev,
+          { from: 'bot', text: 'No response received from AI' }
+        ]);
       }
     } catch (err) {
       console.error('Chat API error:', err);
-      setMessages(prev => [...prev, { from: 'bot', text: 'Error connecting to AI service: ' + err.message }]);
+      setMessages((prev) => [
+        ...prev,
+        { from: 'bot', text: 'Error connecting to AI service: ' + err.message }
+      ]);
     }
   };
 
   const handleKeyPress = (e) => {
     if (e.key === 'Enter') {
       e.preventDefault();
       sendMessage();
     }
   };
 
   return (
     <div className="card" style={{ marginTop: '20px' }}>
       <div className="card-header">
         <h3>Chatbot</h3>
       </div>
+      {conversations.length > 0 && (
+        <div style={{ padding: '0 15px' }}>
+          <label htmlFor="conv-select">Past Conversations:</label>
+          <select
+            id="conv-select"
+            className="form-control"
+            value={conversationId || ''}
+            onChange={(e) => loadConversation(e.target.value)}
+            style={{ marginBottom: '10px' }}
+          >
+            <option value="">New Conversation</option>
+            {conversations.map((c) => (
+              <option key={c.id} value={c.id}>
+                {c.title}
+              </option>
+            ))}
+          </select>
+        </div>
+      )}
       <div
         className="card-body"
         style={{ maxHeight: '200px', overflowY: 'auto' }}
       >
         {messages.map((msg, idx) => (
           <div key={idx} style={{ marginBottom: '10px' }}>
             <strong>{msg.from === 'user' ? 'You' : 'Coach'}:</strong> {msg.text}
           </div>
         ))}
       </div>
       <div className="card-footer" style={{ display: 'flex' }}>
         <input
           type="text"
           className="form-control"
           value={input}
           onChange={(e) => setInput(e.target.value)}
           onKeyPress={handleKeyPress}
           placeholder="Type your question..."
           style={{ marginRight: '10px' }}
         />
         <button className="btn btn-primary" onClick={sendMessage}>
           Send
         </button>
       </div>
     </div>
 
EOF
)
